default_platform(:ios)

platform :ios do
  desc "Runs all the tests"
  lane :test do
    run_tests(scheme: "Barc")
  end

  desc "Submit a new beta build to Apple TestFlight"
  lane :beta do
    sync_code_signing(readonly: true)

    # Set the build number to the number of Git commits
    build_number = sh "git log --oneline | wc -l"
    increment_build_number(build_number: build_number)

    # Set the marketing number to the release branch name
    release_branch = ENV['CI_COMMIT_BRANCH'] || ENV['BUILDKITE_BRANCH']
    match = /release\/(.*)/.match(release_branch)
    unless match.nil?
      increment_version_number(version_number: match[1])
    end

    # Build the app for App Store
    build_app(
      cloned_source_packages_path: "SourcePackages",
      export_method: "app-store",
      scheme: "Barc")
    
    # Just upload the build to TestFlight, no other changes
    upload_to_testflight(
      api_key_path: ENV["APPLE_API_KEY_JSON"],
      app_platform: "ios",
      skip_submission: true,
      skip_waiting_for_build_processing: true)
  end

  desc "Submit a new beta build to the public TestFlight beta"
  lane :public do
    yesterday = (Date.today - 1).strftime("%Y-%m-%d")
    today = Date.today.strftime("%Y-%m-%d")

    git_log_command = "git log --since=\"#{yesterday}\" --until=\"#{today}\" --pretty=format:\"%s\" --no-merges"
    logs = sh git_log_command

    unless logs.empty?
      upload_to_testflight(
        api_key_path: ENV["APPLE_API_KEY_JSON"],
        app_platform: "ios",
        distribute_only: true,
        distribute_external: true,
        changelog: logs,
        groups: [
          "Public Testers"
        ]
      )
    end
  end

  desc "Set up developer environment"
  lane :dev do
    sync_code_signing
  end

  desc "Regenerate all signing certs"
  lane :certs do
    sync_code_signing(readonly: false, type: "development")
    sync_code_signing(readonly: false, type: "appstore")
  end
end
